/*** ButtonBase ***/

.ButtonBase {
	cursor: pointer;
	display: inline-block;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

.ButtonBase.disabled {
	cursor: default;
}

/* Generic appearance */
.ButtonBase.generic {
    border: 1px solid gray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    font: caption;
    padding: .25em .5em;
}
.ButtonBase.generic:hover {
    background-color: lightgray;
}
.ButtonBase.generic.pressed {
    background-color: gray;
    color: white;
}
.ButtonBase.generic.disabled {
    background-color: inherit;
    color: gray;
}

/*** Page ***/

.Page.fill {
    height: 100%;
	margin: 0;
	padding: 0;
	position: absolute;
	width: 100%;
}

/*** Popup ***/

.Popup {
	display: none;
	position: absolute;
	z-index: 1;
}

/* Generic appearance */
.Popup.generic {
    background: white;
    border: 1px solid gray;
    padding: .25em;
}

/*** Sprite ***/

.Sprite {
	background-repeat: no-repeat;
}

/*** Switch ***/

.Switch .hidden {
	display: none !important;
}

/*** TabSet ***/

.TabSet {
    position: relative;
}

.TabSet #buttons {
    white-space: nowrap; /* So tabs don't wrap. */
}

/*** TextBox ***/

.TextBox #textBox {
    height: 100%;
    width: 100%;
}

/*** ToggleButton ***/

.ToggleButton .ToggleButtonBase.generic.selected {
    background: lightgray;
    border-color: gray;
}

/*** VerticalAlign ***/

.VerticalAlign {
	display: table;
	height: 100%;
}

.VerticalAlign > * {
	display: table-cell;
	vertical-align: middle;
}

/*** VerticalPanels ***/

.VerticalPanels {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    /*
    Setting height when not in fill mode prevents resize logic from
    cylcing endlessly and shouldn't otherwise affect anything.
    */
    height: 100%;
    position: relative;
}
.VerticalPanels > * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: relative; /* So inner controls can be absolutely positioned within */
}

.VerticalPanels.fill {
    overflow-y: hidden;
    position: absolute;
    width: 100%;
}
.VerticalPanels.fill #VerticalPanels_content {
    overflow-y: auto;
}

/*** ComboBox ***/

.ComboBox {
    display: inline-table;
}

.ComboBox #HasPopup_content > * {
    display: table-cell;
}

.ComboBox #ComboBox_content input[type='text'] {
    border: none;
    outline: none;
    padding: 2px;
}

.ComboBox #dropdownButton {
    text-align: center;
    vertical-align: middle;
    width: 1.4em;
}

/* Generic appearance */
.ComboBox.generic {
    border: 1px solid lightgray;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}
.ComboBox.generic #HasPopup_popup {
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}
.ComboBox.generic #dropdownButton {
    border-left: 1px solid transparent;
}
.ComboBox.generic #dropdownButton:hover {
    border-color: lightgray;
}

/*** Dialog ***/

.Dialog {
	position: fixed;
}

/* Generic appearance */
.Dialog.generic {
    background-color: white;
    border: 1px solid black;
    padding: .75em;
}

/*** HorizontalPanels ***/

.HorizontalPanels {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    position: relative;
    /*
    Setting width when not in fill mode prevents resize logic from
    cylcing endlessly and shouldn't otherwise affect anything.
    */
    width: 100%;
}

.HorizontalPanels > * {
    box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    bottom: 0;
    position: absolute;
    top: 0;
}

.HorizontalPanels #HorizontalPanels_left {
    left: 0;
}
.HorizontalPanels #HorizontalPanels_right {
    right: 0;
}

.HorizontalPanels.fill {
    height: 100%;
    position: absolute;
}

